{"ast":null,"code":"var _jsxFileName = \"/Users/rla/Projects/Speecher/src/react-frontend/src/components/AudioRecorder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Mic, Square, Play, Pause, Download, Trash2 } from 'lucide-react';\nimport WaveSurfer from 'wavesurfer.js';\nimport './AudioRecorder.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AudioRecorder = ({\n  onAudioRecorded,\n  isLoading\n}) => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [audioUrl, setAudioUrl] = useState(null);\n  const [duration, setDuration] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const mediaRecorderRef = useRef(null);\n  const streamRef = useRef(null);\n  const chunksRef = useRef([]);\n  const timerRef = useRef(null);\n  const wavesurferRef = useRef(null);\n  const waveformRef = useRef(null);\n  useEffect(() => {\n    // Initialize WaveSurfer when we have audio\n    if (audioUrl && waveformRef.current && !wavesurferRef.current) {\n      wavesurferRef.current = WaveSurfer.create({\n        container: waveformRef.current,\n        waveColor: '#4F46E5',\n        progressColor: '#818CF8',\n        cursorColor: '#4F46E5',\n        barWidth: 2,\n        barRadius: 3,\n        responsive: true,\n        height: 60,\n        normalize: true,\n        backend: 'WebAudio'\n      });\n      wavesurferRef.current.load(audioUrl);\n      wavesurferRef.current.on('finish', () => {\n        setIsPlaying(false);\n      });\n    }\n    return () => {\n      if (wavesurferRef.current) {\n        wavesurferRef.current.destroy();\n        wavesurferRef.current = null;\n      }\n    };\n  }, [audioUrl]);\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true\n        }\n      });\n      streamRef.current = stream;\n      const mediaRecorder = new MediaRecorder(stream, {\n        mimeType: 'audio/webm'\n      });\n      mediaRecorderRef.current = mediaRecorder;\n      chunksRef.current = [];\n      mediaRecorder.ondataavailable = event => {\n        if (event.data.size > 0) {\n          chunksRef.current.push(event.data);\n        }\n      };\n      mediaRecorder.onstop = async () => {\n        const audioBlob = new Blob(chunksRef.current, {\n          type: 'audio/webm'\n        });\n        const audioUrl = URL.createObjectURL(audioBlob);\n\n        // Convert to WAV for better compatibility\n        const wavBlob = await convertToWav(audioBlob);\n        setAudioBlob(wavBlob);\n        setAudioUrl(audioUrl);\n        setIsRecording(false);\n\n        // Clean up waveform for new recording\n        if (wavesurferRef.current) {\n          wavesurferRef.current.destroy();\n          wavesurferRef.current = null;\n        }\n      };\n      mediaRecorder.start(100); // Collect data every 100ms\n      setIsRecording(true);\n      setDuration(0);\n\n      // Start duration timer\n      timerRef.current = setInterval(() => {\n        setDuration(prev => prev + 1);\n      }, 1000);\n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n      alert('Unable to access microphone. Please check permissions.');\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n      mediaRecorderRef.current.stop();\n      if (streamRef.current) {\n        streamRef.current.getTracks().forEach(track => track.stop());\n      }\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n      setIsRecording(false);\n    }\n  };\n  const convertToWav = async webmBlob => {\n    // For now, return the webm blob\n    // In production, you'd convert to WAV using AudioContext\n    return webmBlob;\n  };\n  const togglePlayback = () => {\n    if (wavesurferRef.current) {\n      if (isPlaying) {\n        wavesurferRef.current.pause();\n      } else {\n        wavesurferRef.current.play();\n      }\n      setIsPlaying(!isPlaying);\n    }\n  };\n  const clearRecording = () => {\n    setAudioBlob(null);\n    setAudioUrl(null);\n    setDuration(0);\n    setIsPlaying(false);\n    if (wavesurferRef.current) {\n      wavesurferRef.current.destroy();\n      wavesurferRef.current = null;\n    }\n  };\n  const downloadRecording = () => {\n    if (audioBlob) {\n      const url = URL.createObjectURL(audioBlob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `recording_${new Date().toISOString()}.webm`;\n      a.click();\n      URL.revokeObjectURL(url);\n    }\n  };\n  const submitForTranscription = () => {\n    if (audioBlob && onAudioRecorded) {\n      onAudioRecorded(audioBlob);\n    }\n  };\n  const formatDuration = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"audio-recorder\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recorder-controls\",\n      children: [!isRecording && !audioBlob && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"record-btn start\",\n        onClick: startRecording,\n        disabled: isLoading,\n        children: [/*#__PURE__*/_jsxDEV(Mic, {\n          size: 24\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Start Recording\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this), isRecording && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"record-btn stop\",\n          onClick: stopRecording,\n          children: [/*#__PURE__*/_jsxDEV(Square, {\n            size: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Stop Recording\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"recording-indicator\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"pulse\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"timer\",\n            children: formatDuration(duration)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), audioBlob && !isRecording && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playback-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"control-btn\",\n          onClick: togglePlayback,\n          children: isPlaying ? /*#__PURE__*/_jsxDEV(Pause, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 28\n          }, this) : /*#__PURE__*/_jsxDEV(Play, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 50\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"waveform\",\n          ref: waveformRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"duration\",\n          children: formatDuration(duration)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"control-btn\",\n          onClick: downloadRecording,\n          title: \"Download recording\",\n          children: /*#__PURE__*/_jsxDEV(Download, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"control-btn\",\n          onClick: clearRecording,\n          title: \"Clear recording\",\n          children: /*#__PURE__*/_jsxDEV(Trash2, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"submit-btn\",\n          onClick: submitForTranscription,\n          disabled: isLoading,\n          children: isLoading ? 'Processing...' : 'Transcribe'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), isRecording && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recording-tips\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uD83C\\uDFA4 Speak clearly into your microphone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioRecorder, \"pJLPcOXWtKZPK+qfBnTYx2BstC0=\");\n_c = AudioRecorder;\nexport default AudioRecorder;\nvar _c;\n$RefreshReg$(_c, \"AudioRecorder\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Mic","Square","Play","Pause","Download","Trash2","WaveSurfer","jsxDEV","_jsxDEV","Fragment","_Fragment","AudioRecorder","onAudioRecorded","isLoading","_s","isRecording","setIsRecording","audioBlob","setAudioBlob","audioUrl","setAudioUrl","duration","setDuration","isPlaying","setIsPlaying","mediaRecorderRef","streamRef","chunksRef","timerRef","wavesurferRef","waveformRef","current","create","container","waveColor","progressColor","cursorColor","barWidth","barRadius","responsive","height","normalize","backend","load","on","destroy","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","echoCancellation","noiseSuppression","autoGainControl","mediaRecorder","MediaRecorder","mimeType","ondataavailable","event","data","size","push","onstop","Blob","type","URL","createObjectURL","wavBlob","convertToWav","start","setInterval","prev","error","console","alert","stopRecording","state","stop","getTracks","forEach","track","clearInterval","webmBlob","togglePlayback","pause","play","clearRecording","downloadRecording","url","a","document","createElement","href","download","Date","toISOString","click","revokeObjectURL","submitForTranscription","formatDuration","seconds","mins","Math","floor","secs","toString","padStart","className","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","ref","title","_c","$RefreshReg$"],"sources":["/Users/rla/Projects/Speecher/src/react-frontend/src/components/AudioRecorder.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { Mic, Square, Play, Pause, Download, Trash2 } from 'lucide-react';\nimport WaveSurfer from 'wavesurfer.js';\nimport './AudioRecorder.css';\n\nconst AudioRecorder = ({ onAudioRecorded, isLoading }) => {\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [audioUrl, setAudioUrl] = useState(null);\n  const [duration, setDuration] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  \n  const mediaRecorderRef = useRef(null);\n  const streamRef = useRef(null);\n  const chunksRef = useRef([]);\n  const timerRef = useRef(null);\n  const wavesurferRef = useRef(null);\n  const waveformRef = useRef(null);\n\n  useEffect(() => {\n    // Initialize WaveSurfer when we have audio\n    if (audioUrl && waveformRef.current && !wavesurferRef.current) {\n      wavesurferRef.current = WaveSurfer.create({\n        container: waveformRef.current,\n        waveColor: '#4F46E5',\n        progressColor: '#818CF8',\n        cursorColor: '#4F46E5',\n        barWidth: 2,\n        barRadius: 3,\n        responsive: true,\n        height: 60,\n        normalize: true,\n        backend: 'WebAudio'\n      });\n\n      wavesurferRef.current.load(audioUrl);\n      \n      wavesurferRef.current.on('finish', () => {\n        setIsPlaying(false);\n      });\n    }\n\n    return () => {\n      if (wavesurferRef.current) {\n        wavesurferRef.current.destroy();\n        wavesurferRef.current = null;\n      }\n    };\n  }, [audioUrl]);\n\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ \n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true\n        } \n      });\n      \n      streamRef.current = stream;\n      \n      const mediaRecorder = new MediaRecorder(stream, {\n        mimeType: 'audio/webm'\n      });\n      \n      mediaRecorderRef.current = mediaRecorder;\n      chunksRef.current = [];\n      \n      mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          chunksRef.current.push(event.data);\n        }\n      };\n      \n      mediaRecorder.onstop = async () => {\n        const audioBlob = new Blob(chunksRef.current, { type: 'audio/webm' });\n        const audioUrl = URL.createObjectURL(audioBlob);\n        \n        // Convert to WAV for better compatibility\n        const wavBlob = await convertToWav(audioBlob);\n        \n        setAudioBlob(wavBlob);\n        setAudioUrl(audioUrl);\n        setIsRecording(false);\n        \n        // Clean up waveform for new recording\n        if (wavesurferRef.current) {\n          wavesurferRef.current.destroy();\n          wavesurferRef.current = null;\n        }\n      };\n      \n      mediaRecorder.start(100); // Collect data every 100ms\n      setIsRecording(true);\n      setDuration(0);\n      \n      // Start duration timer\n      timerRef.current = setInterval(() => {\n        setDuration(prev => prev + 1);\n      }, 1000);\n      \n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n      alert('Unable to access microphone. Please check permissions.');\n    }\n  };\n\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n      mediaRecorderRef.current.stop();\n      \n      if (streamRef.current) {\n        streamRef.current.getTracks().forEach(track => track.stop());\n      }\n      \n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n      \n      setIsRecording(false);\n    }\n  };\n\n  const convertToWav = async (webmBlob) => {\n    // For now, return the webm blob\n    // In production, you'd convert to WAV using AudioContext\n    return webmBlob;\n  };\n\n  const togglePlayback = () => {\n    if (wavesurferRef.current) {\n      if (isPlaying) {\n        wavesurferRef.current.pause();\n      } else {\n        wavesurferRef.current.play();\n      }\n      setIsPlaying(!isPlaying);\n    }\n  };\n\n  const clearRecording = () => {\n    setAudioBlob(null);\n    setAudioUrl(null);\n    setDuration(0);\n    setIsPlaying(false);\n    \n    if (wavesurferRef.current) {\n      wavesurferRef.current.destroy();\n      wavesurferRef.current = null;\n    }\n  };\n\n  const downloadRecording = () => {\n    if (audioBlob) {\n      const url = URL.createObjectURL(audioBlob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `recording_${new Date().toISOString()}.webm`;\n      a.click();\n      URL.revokeObjectURL(url);\n    }\n  };\n\n  const submitForTranscription = () => {\n    if (audioBlob && onAudioRecorded) {\n      onAudioRecorded(audioBlob);\n    }\n  };\n\n  const formatDuration = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"audio-recorder\">\n      <div className=\"recorder-controls\">\n        {!isRecording && !audioBlob && (\n          <button \n            className=\"record-btn start\"\n            onClick={startRecording}\n            disabled={isLoading}\n          >\n            <Mic size={24} />\n            <span>Start Recording</span>\n          </button>\n        )}\n        \n        {isRecording && (\n          <>\n            <button \n              className=\"record-btn stop\"\n              onClick={stopRecording}\n            >\n              <Square size={24} />\n              <span>Stop Recording</span>\n            </button>\n            <div className=\"recording-indicator\">\n              <span className=\"pulse\"></span>\n              <span className=\"timer\">{formatDuration(duration)}</span>\n            </div>\n          </>\n        )}\n        \n        {audioBlob && !isRecording && (\n          <div className=\"playback-controls\">\n            <button \n              className=\"control-btn\"\n              onClick={togglePlayback}\n            >\n              {isPlaying ? <Pause size={20} /> : <Play size={20} />}\n            </button>\n            \n            <div className=\"waveform\" ref={waveformRef}></div>\n            \n            <span className=\"duration\">{formatDuration(duration)}</span>\n            \n            <button \n              className=\"control-btn\"\n              onClick={downloadRecording}\n              title=\"Download recording\"\n            >\n              <Download size={20} />\n            </button>\n            \n            <button \n              className=\"control-btn\"\n              onClick={clearRecording}\n              title=\"Clear recording\"\n            >\n              <Trash2 size={20} />\n            </button>\n            \n            <button \n              className=\"submit-btn\"\n              onClick={submitForTranscription}\n              disabled={isLoading}\n            >\n              {isLoading ? 'Processing...' : 'Transcribe'}\n            </button>\n          </div>\n        )}\n      </div>\n      \n      {isRecording && (\n        <div className=\"recording-tips\">\n          <p>🎤 Speak clearly into your microphone</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AudioRecorder;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}