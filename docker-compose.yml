services:
  mongodb:
    image: mongo:7.0
    container_name: speacher-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: speacher_admin_pass
      MONGO_INITDB_DATABASE: speacher
    volumes:
      - mongodb_data:/data/db
      - ./docker/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/speacher --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - speacher-network

  backend:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    container_name: speacher-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # MongoDB configuration
      MONGODB_URI: mongodb://speacher_user:speacher_pass@mongodb:27017/speecher?authSource=speecher
      MONGODB_DB: speacher
      MONGODB_COLLECTION: transcriptions
      
      # AWS Configuration
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:-us-east-1}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME:-speacher-audio}
      
      # Azure Configuration
      AZURE_STORAGE_ACCOUNT: ${AZURE_STORAGE_ACCOUNT:-}
      AZURE_STORAGE_KEY: ${AZURE_STORAGE_KEY:-}
      AZURE_CONTAINER_NAME: ${AZURE_CONTAINER_NAME:-speecher}
      AZURE_SPEECH_KEY: ${AZURE_SPEECH_KEY:-}
      AZURE_SPEECH_REGION: ${AZURE_SPEECH_REGION:-eastus}
      
      # Google Cloud Configuration
      GCP_PROJECT_ID: ${GCP_PROJECT_ID:-}
      GCP_BUCKET_NAME: ${GCP_BUCKET_NAME:-speacher-gcp}
      GCP_CREDENTIALS_FILE: ${GCP_CREDENTIALS_FILE:-}
      
      # Application settings
      PYTHONUNBUFFERED: 1
      ENVIRONMENT: docker
      
    volumes:
      # Mount source code for hot-reload - changes will be reflected immediately
      - ./src:/app/src:ro
      - ./tests:/app/tests:ro
      # Mount for temporary files
      - /tmp:/tmp
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - speacher-network
    command: ["uvicorn", "src.backend.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  frontend:
    build:
      context: .
      dockerfile: docker/react.Dockerfile
    container_name: speacher-react
    restart: unless-stopped
    ports:
      - "3000:80"
    environment:
      REACT_APP_API_URL: http://localhost:8000
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - speacher-network

  # Test runner service - run with: docker-compose --profile test up test-runner
  test-runner:
    build:
      context: .
      dockerfile: docker/test.Dockerfile
    container_name: speacher-tests
    environment:
      # Test database configuration - completely isolated from development
      MONGODB_URI: mongodb://speacher_user:speacher_pass@mongodb:27017/speacher_test?authSource=speecher
      MONGODB_DB: speacher_test
      MONGODB_COLLECTION: transcriptions_test
      
      # Test isolation flag
      TEST_ISOLATION: "true"
      
      # Backend service URL for integration tests
      BACKEND_URL: http://backend:8000
      
      # Python configuration
      PYTHONUNBUFFERED: 1
      
      # AWS Test Configuration (optional)
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:-us-east-1}
      
      # Test environment indicator
      ENVIRONMENT: test
    volumes:
      - ./src:/app/src:ro
      - ./tests:/app/tests:ro
      - ./test_results:/app/test_results
      - ./docker/scripts:/app/scripts:ro
    depends_on:
      mongodb:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - speacher-network
    profiles:
      - test  # Only run when explicitly requested
    # Command includes database cleanup before tests
    command: >
      sh -c "
        echo 'Initializing test environment...' &&
        echo 'Cleaning up test database...' &&
        python -c \"
        import pymongo
        from urllib.parse import quote_plus
        
        # Connect to MongoDB
        client = pymongo.MongoClient('mongodb://speacher_user:speacher_pass@mongodb:27017/?authSource=speecher')
        
        # Drop the test database if it exists
        print('Dropping existing test database...')
        client.drop_database('speacher_test')
        
        # Create fresh test database
        test_db = client['speacher_test']
        
        # Create test collections with proper indexes
        print('Creating test collections...')
        test_db.create_collection('transcriptions_test')
        test_db['transcriptions_test'].create_index('created_at')
        test_db['transcriptions_test'].create_index('user_id')
        
        # Verify database creation
        print(f'Test database ready: {test_db.name}')
        print(f'Collections: {test_db.list_collection_names()}')
        
        client.close()
        print('Test database initialization complete!')
        \" &&
        echo 'Running tests with isolated database...' &&
        pytest tests/ -v --tb=short --junit-xml=/app/test_results/results.xml --maxfail=10 -x
      "

volumes:
  mongodb_data:
    driver: local

networks:
  speacher-network:
    driver: bridge