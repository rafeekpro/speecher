name: Frontend v2 PR Checks

on:
  pull_request:
    branches: [develop, main, feature/frontend-v2]
    paths:
      - 'src/frontend/**'
      - 'tests/frontend/**'
      - 'package.json'
      - 'package-lock.json'
      - 'tsconfig.json'
      - '.github/workflows/frontend-v2-pr.yml'

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
      continue-on-error: false
    
    - name: Run type checking
      run: npm run typecheck || npm run type-check || npx tsc --noEmit
      continue-on-error: false
    
    - name: Run tests with coverage
      run: npm test -- --coverage --watchAll=false --passWithNoTests
      env:
        CI: true
    
    - name: Upload coverage to Codecov
      if: matrix.node-version == '20.x'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: frontend
        name: frontend-coverage
    
    - name: Build application
      run: npm run build
      env:
        CI: true
    
    - name: Check bundle size
      if: matrix.node-version == '20.x'
      run: |
        echo "## 📦 Bundle Size Report" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        du -sh dist/* 2>/dev/null || du -sh build/* 2>/dev/null || echo "Build output not found" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
    
    - name: Comment PR with test results
      if: github.event_name == 'pull_request' && matrix.node-version == '20.x'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let coverageData = {};
          
          try {
            if (fs.existsSync('./coverage/coverage-summary.json')) {
              coverageData = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
            }
          } catch (error) {
            console.log('Coverage data not found');
          }
          
          const total = coverageData.total || {};
          const statements = total.statements || {};
          const branches = total.branches || {};
          const functions = total.functions || {};
          const lines = total.lines || {};
          
          const comment = `## 📊 Test Coverage Report
          
          | Metric | Coverage | Status |
          |--------|----------|--------|
          | Statements | ${statements.pct || 'N/A'}% | ${statements.pct >= 80 ? '✅' : '⚠️'} |
          | Branches | ${branches.pct || 'N/A'}% | ${branches.pct >= 80 ? '✅' : '⚠️'} |
          | Functions | ${functions.pct || 'N/A'}% | ${functions.pct >= 80 ? '✅' : '⚠️'} |
          | Lines | ${lines.pct || 'N/A'}% | ${lines.pct >= 80 ? '✅' : '⚠️'} |
          
          ✅ All checks passed for Node ${{ matrix.node-version }}`;
          
          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Test Coverage Report')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment
            });
          } else {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  security-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
    
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.pull_request.base.sha }}
        head: ${{ github.event.pull_request.head.sha }}

  label-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/labeler@v4
      with:
        repo-token: "${{ secrets.GITHUB_TOKEN }}"
        configuration-path: .github/labeler.yml