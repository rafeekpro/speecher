version: '3.9'

services:
  # PostgreSQL database for production
  postgres:
    image: postgres:15-alpine
    container_name: speecher-postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-speecher}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-speecher}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-speecher} -d ${POSTGRES_DB:-speecher}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - speecher-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Redis for caching/sessions
  redis:
    image: redis:7-alpine
    container_name: speecher-redis
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - speecher-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Backend API
  backend:
    image: ${REGISTRY:-docker.io}/${IMAGE_PREFIX:-speecher}/backend:${VERSION:-latest}
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
      cache_from:
        - ${REGISTRY:-docker.io}/${IMAGE_PREFIX:-speecher}/backend:latest
        - ${REGISTRY:-docker.io}/${IMAGE_PREFIX:-speecher}/backend:builder
    container_name: speecher-backend
    restart: always
    ports:
      - "8000:8000"
    environment:
      # Database configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-speecher}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-speecher}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      
      # Application settings
      ENVIRONMENT: production
      DEBUG: "false"
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # Security
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ALGORITHM: ${JWT_ALGORITHM:-HS256}
      JWT_EXPIRATION_MINUTES: ${JWT_EXPIRATION_MINUTES:-60}
      
      # CORS settings
      CORS_ORIGINS: ${CORS_ORIGINS}
      
      # Cloud storage (configure as needed)
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:-us-east-1}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME:-}
      
      AZURE_STORAGE_ACCOUNT: ${AZURE_STORAGE_ACCOUNT:-}
      AZURE_STORAGE_KEY: ${AZURE_STORAGE_KEY:-}
      AZURE_CONTAINER_NAME: ${AZURE_CONTAINER_NAME:-}
      
      GCP_PROJECT_ID: ${GCP_PROJECT_ID:-}
      GCP_BUCKET_NAME: ${GCP_BUCKET_NAME:-}
      GCP_CREDENTIALS_JSON: ${GCP_CREDENTIALS_JSON:-}
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - speecher-network
    deploy:
      replicas: ${BACKEND_REPLICAS:-2}
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '1'
          memory: 512M
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s

  # Frontend served by nginx
  frontend:
    image: ${REGISTRY:-docker.io}/${IMAGE_PREFIX:-speecher}/frontend:${VERSION:-latest}
    build:
      context: .
      dockerfile: docker/react.Dockerfile
      cache_from:
        - ${REGISTRY:-docker.io}/${IMAGE_PREFIX:-speecher}/frontend:latest
        - ${REGISTRY:-docker.io}/${IMAGE_PREFIX:-speecher}/frontend:builder
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL:-/api}
    container_name: speecher-frontend
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/ssl:/etc/nginx/ssl:ro
      - ./docker/nginx.prod.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - speecher-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  speecher-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16