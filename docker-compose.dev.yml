services:
  # PostgreSQL database for development
  postgres:
    image: postgres:15-alpine
    container_name: speacher-postgres-dev
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: speacher
      POSTGRES_PASSWORD: speacher_dev_pass
      POSTGRES_DB: speacher_dev
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-postgres.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U speacher -d speacher_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - speacher-dev-network

  # MongoDB for development (if still needed)
  mongodb:
    image: mongo:7.0
    container_name: speacher-mongodb-dev
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: speacher_admin_pass
      MONGO_INITDB_DATABASE: speacher_dev
    volumes:
      - mongodb_data:/data/db
      - ./docker/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/speacher_dev --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - speacher-dev-network

  # Redis for caching/sessions
  redis:
    image: redis:7-alpine
    container_name: speacher-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - speacher-dev-network

  # Backend with hot-reload
  backend:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    container_name: speacher-backend-dev
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Database configuration
      DATABASE_URL: postgresql://speacher:speacher_dev_pass@postgres:5432/speacher_dev
      MONGODB_URI: mongodb://admin:speacher_admin_pass@mongodb:27017/speacher_dev?authSource=admin
      REDIS_URL: redis://redis:6379/0
      
      # Application settings
      PYTHONUNBUFFERED: 1
      ENVIRONMENT: development
      DEBUG: "true"
      LOG_LEVEL: DEBUG
      
      # CORS settings for development
      CORS_ORIGINS: "http://localhost:3000,http://localhost:3001"
      
      # JWT settings
      JWT_SECRET_KEY: dev-secret-key-change-in-production
      JWT_ALGORITHM: HS256
      JWT_EXPIRATION_MINUTES: 1440
      
      # AWS Configuration (optional)
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:-us-east-1}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME:-speacher-audio-dev}
      
      # Azure Configuration (optional)
      AZURE_STORAGE_ACCOUNT: ${AZURE_STORAGE_ACCOUNT:-}
      AZURE_STORAGE_KEY: ${AZURE_STORAGE_KEY:-}
      AZURE_CONTAINER_NAME: ${AZURE_CONTAINER_NAME:-speacher-dev}
      AZURE_SPEECH_KEY: ${AZURE_SPEECH_KEY:-}
      AZURE_SPEECH_REGION: ${AZURE_SPEECH_REGION:-eastus}
      
      # Google Cloud Configuration (optional)
      GCP_PROJECT_ID: ${GCP_PROJECT_ID:-}
      GCP_BUCKET_NAME: ${GCP_BUCKET_NAME:-speacher-gcp-dev}
      GCP_CREDENTIALS_FILE: ${GCP_CREDENTIALS_FILE:-}
      
    volumes:
      # Mount source code for hot-reload
      - ./src/backend:/app/src/backend:cached
      - ./src/speacher:/app/src/speacher:cached
      - ./tests:/app/tests:cached
      # Mount pyproject.toml for dependency changes
      - ./pyproject.toml:/app/pyproject.toml:ro
      - ./uv.lock:/app/uv.lock:ro
      # Mount for temporary files
      - /tmp:/tmp
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - speacher-dev-network
    # Override command for hot-reload with watchfiles
    command: ["uvicorn", "src.backend.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload", "--reload-dir", "/app/src/backend"]

  # Frontend with hot-reload
  frontend:
    build:
      context: .
      dockerfile: docker/react.dev.Dockerfile
    container_name: speacher-react-dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # React environment variables
      REACT_APP_API_URL: http://localhost:8000
      REACT_APP_WS_URL: ws://localhost:8000
      REACT_APP_ENVIRONMENT: development
      
      # Development settings
      CHOKIDAR_USEPOLLING: "true"  # Enable polling for file changes in Docker
      WATCHPACK_POLLING: "true"
      WDS_SOCKET_PORT: 3000
      
      # Node settings
      NODE_ENV: development
      
    volumes:
      # Mount source code for hot-reload
      - ./src/react-frontend:/app:cached
      # Anonymous volumes to prevent host node_modules from overriding container
      - /app/node_modules
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - speacher-dev-network
    stdin_open: true  # Keep STDIN open for interactive debugging
    tty: true  # Allocate a pseudo-TTY

  # Nginx reverse proxy for development (optional, simulates production)
  nginx:
    image: nginx:alpine
    container_name: speacher-nginx-dev
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.dev.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro  # For local SSL certificates
    depends_on:
      - backend
      - frontend
    networks:
      - speacher-dev-network
    profiles:
      - with-proxy  # Only run when explicitly requested

  # Development tools container (optional)
  devtools:
    image: node:18-alpine
    container_name: speacher-devtools
    working_dir: /workspace
    volumes:
      - .:/workspace:cached
    networks:
      - speacher-dev-network
    profiles:
      - tools  # Only run when explicitly requested
    command: ["tail", "-f", "/dev/null"]  # Keep container running

  # Test runner service for development
  test-runner:
    build:
      context: .
      dockerfile: docker/test.Dockerfile
    container_name: speacher-tests-dev
    environment:
      DATABASE_URL: postgresql://speacher:speacher_dev_pass@postgres:5432/speacher_test
      MONGODB_URI: mongodb://admin:speacher_admin_pass@mongodb:27017/speacher_test?authSource=admin
      REDIS_URL: redis://redis:6379/1
      BACKEND_URL: http://backend:8000
      PYTHONUNBUFFERED: 1
      PYTEST_ADDOPTS: "-vv --tb=short --color=yes"
    volumes:
      - ./src/backend:/app/src/backend:cached
      - ./src/speacher:/app/src/speacher:cached
      - ./tests:/app/tests:cached
      - ./test_results:/app/test_results
      - ./pyproject.toml:/app/pyproject.toml:ro
      - ./uv.lock:/app/uv.lock:ro
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - speacher-dev-network
    profiles:
      - test  # Only run when explicitly requested
    command: ["pytest", "tests/", "-v", "--tb=short", "--junit-xml=/app/test_results/results.xml"]

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  speacher-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16