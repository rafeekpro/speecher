# Docker Development Makefile
.PHONY: help dev prod build test clean logs shell

# Default target
help:
	@echo "Docker Development Commands:"
	@echo ""
	@echo "Development:"
	@echo "  make dev          - Start development environment with hot-reload"
	@echo "  make dev-build    - Build development images"
	@echo "  make dev-down     - Stop development environment"
	@echo "  make dev-clean    - Stop and remove volumes"
	@echo ""
	@echo "Production:"
	@echo "  make prod         - Start production environment"
	@echo "  make prod-build   - Build production images"
	@echo "  make prod-down    - Stop production environment"
	@echo ""
	@echo "Testing:"
	@echo "  make test         - Run all tests"
	@echo "  make test-backend - Run backend tests"
	@echo "  make test-frontend - Run frontend tests"
	@echo ""
	@echo "Utilities:"
	@echo "  make logs         - Show logs for all services"
	@echo "  make logs-backend - Show backend logs"
	@echo "  make logs-frontend - Show frontend logs"
	@echo "  make shell-backend - Open shell in backend container"
	@echo "  make shell-frontend - Open shell in frontend container"
	@echo "  make db-shell     - Open PostgreSQL shell"
	@echo "  make redis-cli    - Open Redis CLI"
	@echo "  make clean        - Clean all Docker resources"
	@echo "  make prune        - Remove all unused Docker resources"

# Development commands
dev:
	docker compose -f docker-compose.dev.yml up

dev-d:
	docker compose -f docker-compose.dev.yml up -d

dev-build:
	docker compose -f docker-compose.dev.yml build

dev-rebuild:
	docker compose -f docker-compose.dev.yml build --no-cache

dev-down:
	docker compose -f docker-compose.dev.yml down

dev-clean:
	docker compose -f docker-compose.dev.yml down -v

dev-restart:
	docker compose -f docker-compose.dev.yml restart

# Production commands
prod:
	docker compose -f docker-compose.prod.yml up

prod-d:
	docker compose -f docker-compose.prod.yml up -d

prod-build:
	docker compose -f docker-compose.prod.yml build

prod-push:
	docker compose -f docker-compose.prod.yml push

prod-down:
	docker compose -f docker-compose.prod.yml down

prod-clean:
	docker compose -f docker-compose.prod.yml down -v

# Testing commands
test:
	docker compose -f docker-compose.dev.yml --profile test up test-runner

test-backend:
	docker compose -f docker-compose.dev.yml run --rm test-runner pytest tests/backend/ -v

test-frontend:
	docker compose -f docker-compose.dev.yml exec frontend npm test

test-e2e:
	docker compose -f docker-compose.dev.yml run --rm test-runner pytest tests/e2e/ -v

test-coverage:
	docker compose -f docker-compose.dev.yml run --rm test-runner pytest --cov=src --cov-report=html --cov-report=term

# Logging commands
logs:
	docker compose -f docker-compose.dev.yml logs -f

logs-backend:
	docker compose -f docker-compose.dev.yml logs -f backend

logs-frontend:
	docker compose -f docker-compose.dev.yml logs -f frontend

logs-db:
	docker compose -f docker-compose.dev.yml logs -f postgres

# Shell access
shell-backend:
	docker compose -f docker-compose.dev.yml exec backend bash

shell-frontend:
	docker compose -f docker-compose.dev.yml exec frontend sh

shell-test:
	docker compose -f docker-compose.dev.yml run --rm test-runner bash

db-shell:
	docker compose -f docker-compose.dev.yml exec postgres psql -U speecher -d speecher_dev

mongo-shell:
	docker compose -f docker-compose.dev.yml exec mongodb mongosh -u admin -p speecher_admin_pass

redis-cli:
	docker compose -f docker-compose.dev.yml exec redis redis-cli

# Database operations
db-migrate:
	docker compose -f docker-compose.dev.yml exec backend alembic upgrade head

db-rollback:
	docker compose -f docker-compose.dev.yml exec backend alembic downgrade -1

db-reset:
	docker compose -f docker-compose.dev.yml exec backend alembic downgrade base
	docker compose -f docker-compose.dev.yml exec backend alembic upgrade head

db-seed:
	docker compose -f docker-compose.dev.yml exec backend python scripts/seed_database.py

# Maintenance commands
clean:
	docker compose -f docker-compose.dev.yml down -v --remove-orphans
	docker compose -f docker-compose.prod.yml down -v --remove-orphans

prune:
	docker system prune -af --volumes

stats:
	docker stats --no-stream

ps:
	docker compose -f docker-compose.dev.yml ps

images:
	docker images | grep speecher

# Build specific services
build-backend:
	docker compose -f docker-compose.dev.yml build backend

build-frontend:
	docker compose -f docker-compose.dev.yml build frontend

# Health checks
health:
	@echo "Checking service health..."
	@curl -f http://localhost:8000/health || echo "Backend: DOWN"
	@curl -f http://localhost:3000/ || echo "Frontend: DOWN"
	@docker compose -f docker-compose.dev.yml exec postgres pg_isready || echo "PostgreSQL: DOWN"
	@docker compose -f docker-compose.dev.yml exec redis redis-cli ping || echo "Redis: DOWN"

# Security scanning
scan-backend:
	docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
		aquasec/trivy image speecher/backend:latest

scan-frontend:
	docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
		aquasec/trivy image speecher/frontend:latest

# Quick commands
up: dev-d
down: dev-down
restart: dev-restart
build: dev-build
test: test